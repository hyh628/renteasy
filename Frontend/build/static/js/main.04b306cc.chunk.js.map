{"version":3,"sources":["pages/Home.js","pages/LoginPage.js","components/Navbar.js","pages/SignupPage.js","pages/PostsPage.js","pages/AddPostPage.js","pages/UserHomePage.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","_jsx","children","_jsxs","_Fragment","className","Link","to","LoginPage","navigate","useNavigate","onSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","user_name","target","value","password","then","response","ok","console","log","onLogin","json","data","replace","htmlFor","name","type","NavBar","class","style","paddingTop","paddingLeft","paddingRight","href","src","alt","role","isSignedIn","id","SignupPage","nick_name","info","PostsPage","_useState","useState","_useState2","_slicedToArray","posts","setPosts","marginTop","city","map","post","backgroundColor","start_date","end_date","price","description","email","location","state","zipCode","_id","AddPostPage","url","UserHomePage","useEffect","concat","toString","onClick","App","_user$userId","setIsSignedIn","_useState3","_useState4","user","setUser","Router","Navbar","userId","Routes","Route","path","element","user1","exact","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.04b306cc.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Home = props => {\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    /**\n     * CS-5356-TODO\n     *\n     * Log the user in. Grab the value from the username input element\n     * and send it in an object to POST /api/login\n     *\n     * When it responds with a 200 OK, call `props.onLogin()` to have App\n     * update your sign-in status, and then call `navigate('/instructor-home')`\n     * to go to the /instructor-home page\n     */\n    fetch('/api/posts',{\n      method:'GET',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body:JSON.stringify({city: e.target.city.value})\n    }).then(response =>{\n      if(response.ok){\n        console.log('got back ok response')\n        window.location.reload(false);\n      }else{\n        console.log('sign up wrong')\n      }\n    })\n  };\n  return (\n\n    <div>\n\n    <>\n      \n      <section className=\"hero is-small\">\n        <div className=\"container hero-body\">\n          <p className=\"title\">Welcome to RentEasy</p>\n          <p className=\"subtitle\">Please sign up first</p>\n        </div>\n      </section>\n      <section className=\"hero is-small \">\n        <div className=\"container hero-body\">\n          <Link to=\"/signup\" className=\"button is-primary is-large\">\n            Sign Up\n          </Link>\n          <Link to=\"/login\" className=\"button is-primary is-large\">\n            Sign in\n          </Link>\n        </div>\n      </section>\n    </>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n/**\n *\n * CS-5356-TODO Login Page\n *\n * We're going to use a \"mock\" login system, so\n * all we need the user to provide is a username.\n *\n * Once they've filled in the username, they should\n * click Submit, at which point, we log the user in and\n * redirect them\n */\nconst LoginPage = props => {\n  const navigate = useNavigate();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    /**\n     * CS-5356-TODO\n     *\n     * Log the user in. Grab the value from the username input element\n     * and send it in an object to POST /api/login\n     *\n     * When it responds with a 200 OK, call `props.onLogin()` to have App\n     * update your sign-in status, and then call `navigate('/instructor-home')`\n     * to go to the /instructor-home page\n     */\n    fetch('/api/login',{\n      method:'POST',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body:JSON.stringify({user_name: e.target.user_name.value,password:e.target.password.value})\n    }).then(response =>{\n      if(response.ok){\n        console.log('successfully login')\n        props.onLogin()\n        response.json().then(data=>{\n          props.onLogin(data)\n          //window.location.reload(false);\n          //navigate('/posts', {replace: true})\n          navigate('/posts', { user_name: data ,replace: true});\n        })\n\n      }else{\n        console.log('Login wrong')\n      }\n    })\n  };\n  return (\n    <section className=\"hero\">\n      <div className=\"container hero-body\">\n        <h1 className=\"title\">Login</h1>\n        <form onSubmit={handleSubmit}>\n          <label className=\"label\" htmlFor=\"user_name\">\n            Username\n          </label>\n          <input name = \"user_name\" className='input' />\n\n          {/* Add an input for the username */}\n          <label className=\"label\" htmlFor=\"password\">\n            Password\n          </label>\n          <input name = \"password\" className='input' />\n\n          <div>Anonymous access while in prototype mode</div>\n          <div><input type=\"submit\" className='button is-primary'/></div>\n        </form>\n      </div>\n    </section>\n  );\n};\n\nexport default LoginPage;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = props => {\n  return (\n    <nav className=\"navbar\" class=\"navbar is-fixed-top\" style={{ paddingTop: \"5px\" }}>\n      <div\n        className=\"container\"\n        style={{ paddingLeft: \"32px\", paddingRight: \"32px\" }}\n      >\n        <div className=\"navbar-brand\">\n          <a className=\"navbar-item\" href=\"/\">\n            <figure className=\"image\">\n              <img\n                className=\"is-rounded\"\n                src=\"https://bulma.io/images/placeholders/64x64.png\"\n                alt=\"Logo\"\n              />\n            </figure>\n          </a>\n          <a\n            role=\"button\"\n            className=\"navbar-burger\"\n            aria-label=\"menu\"\n            aria-expanded=\"false\"\n            data-target=\"navbarMenu\"\n          >\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n            <span aria-hidden=\"true\"></span>\n          </a>\n        </div>\n        {props.isSignedIn && (\n          <div id=\"navbarMenu\" className=\"navbar-menu\">\n            <div className=\"navbar-end\">\n              <Link to=\"/userHome\" className=\"navbar-item\">\n                <i className=\"material-icons\">person_outline</i>\n                <div>{props.user_name}</div>\n              </Link>\n              <a className=\"button mt\" href=\"/logout\">\n                Logout\n              </a>\n            </div>\n          </div>\n        )}\n        \n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n/**\n *\n * CS-5356-TODO Login Page\n *\n * We're going to use a \"mock\" login system, so\n * all we need the user to provide is a username.\n *\n * Once they've filled in the username, they should\n * click Submit, at which point, we log the user in and\n * redirect them\n */\nconst SignupPage = props => {\n  const navigate = useNavigate();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    /**\n     * CS-5356-TODO\n     *\n     * Log the user in. Grab the value from the username input element\n     * and send it in an object to POST /api/login\n     *\n     * When it responds with a 200 OK, call `props.onLogin()` to have App\n     * update your sign-in status, and then call `navigate('/instructor-home')`\n     * to go to the /instructor-home page\n     */\n    fetch('/api/signup',{\n      method:'POST',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body:JSON.stringify({user_name: e.target.user_name.value, password:e.target.password.value,nick_name:e.target.nick_name.value,info:e.target.info.value})\n    }).then(response =>{\n      if(response.ok){\n        console.log('got back ok response')\n        navigate('/login', {replace: true});\n      }else{\n        console.log('sign up wrong')\n      }\n    })\n  };\n  return (\n    <section className=\"hero\">\n      <div className=\"container hero-body\">\n        <h1 className=\"title\">Sign Up to Start!</h1>\n        <form onSubmit={handleSubmit}>\n          <label className=\"label\" htmlFor=\"username\">\n            Username\n          </label>\n          <input name = \"user_name\" className='input' />\n\n          {/* Add an input for the username */}\n          <label className=\"label\" htmlFor=\"password\">\n            Password\n          </label>\n          <input name = \"password\" className='input' />\n          <label className=\"label\" htmlFor=\"nick_name\">\n            Nickname\n          </label>\n          <input name = \"nick_name\" className='input' />\n          <label className=\"label\" htmlFor=\"info\">\n            Some description about yourself\n          </label>\n          <input name = \"info\" className='input' />\n          <div><input type=\"submit\" className='button is-primary'/></div>\n        </form>\n      </div>\n    </section>\n  );\n};\n\nexport default SignupPage;\n","import { useNavigate } from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/**\n *\n * CS-5356-TODO Login Page\n *\n * We're going to use a \"mock\" login system, so\n * all we need the user to provide is a username.\n *\n * Once they've filled in the username, they should\n * click Submit, at which point, we log the user in and\n * redirect them\n */\nconst PostsPage = props => {\n  const navigate = useNavigate();\n  const [posts, setPosts] = useState([]);\n  console.log(props)\n  const handleSubmit = e => {\n    e.preventDefault();\n    fetch('/api/posts',{\n      method:'POST',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body:JSON.stringify({city: e.target.city.value})\n    }).then(response =>{\n      if(response.ok){\n        response.json().then(data=>{\n          console.log(data)\n          setPosts(data)\n          //window.location.reload(false);\n          //navigate('/posts', {replace: true})\n        })\n      }else{\n        console.log('wrong location')\n      }\n    })\n  };\n  //console.log(posts)\n  return (\n    \n    <section className=\"hero\">\n      <div class=\"container is-max-desktop\" style={{marginTop: '3rem'}}>\n        <form onSubmit={handleSubmit} >\n         \n          <label className=\"label\" htmlFor=\"city\">\n            Enter the city you are interested\n          </label>\n          <input name = \"city\" className='input' />\n          <div><input type=\"submit\" className='button is-primary'/></div>\n        </form>\n        <Link to=\"/addPost\" className=\"button is-primary is-large\">\n            Post a new house\n          </Link>\n      </div>``\n      <div>\n        <p>\n          ~~~\n        </p>\n      </div>\n\n          <div className=\"post-list\" class=\"columns is-desktop\" >\n    {posts && posts.map(post => (\n      <div key={post._id} class=\"column is-primary\"style={{backgroundColor: '#4FFFB0'}} >\n        <h2 className=\"title is-4\">{post.user_name}</h2>\n        <p><strong>Start date:</strong> {post.start_date}</p >\n        <p><strong>End date:</strong> {post.end_date}</p >\n        <p><strong>Price:</strong> {post.price}</p >\n        <p><strong>Description:</strong> {post.description}</p >\n        <p><strong>Email:</strong> {post.email}</p >\n        <p><strong>City:</strong> {post.location.city}</p >\n        <p><strong>State:</strong> {post.location.state}</p >\n        <p><strong>Zip Code:</strong> {post.location.zipCode}</p >\n      </div>\n    ))}\n  </div>\n\n      \n    </section>\n  );\n};\n\nexport default PostsPage;\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n/**\n *\n * CS-5356-TODO Login Page\n *\n * We're going to use a \"mock\" login system, so\n * all we need the user to provide is a username.\n *\n * Once they've filled in the username, they should\n * click Submit, at which point, we log the user in and\n * redirect them\n */\nconst AddPostPage = props => {\n  const navigate = useNavigate();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    /**\n     * CS-5356-TODO\n     *\n     * Log the user in. Grab the value from the username input element\n     * and send it in an object to POST /api/login\n     *\n     * When it responds with a 200 OK, call `props.onLogin()` to have App\n     * update your sign-in status, and then call `navigate('/instructor-home')`\n     * to go to the /instructor-home page\n     */\n    console.log(props)\n    const url = '/api/'+props.user_name.user_name+'/post'\n    fetch(url,{\n      method:'POST',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body:JSON.stringify({start_date: e.target.start_date.value, end_date:e.target.end_date.value,price:e.target.price.value,description:e.target.description.value,email:e.target.email.value, location: {\n        city: e.target.city.value\n      } })\n    }).then(response =>{\n      if(response.ok){\n        console.log('got back ok response')\n        navigate('/posts', {replace: true});\n      }else{\n        console.log('addPost wrong')\n      }\n    })\n  };\n  return (\n    <section className=\"hero\">\n      <div className=\"container hero-body\">\n        <h1 className=\"title\">Finish the following information to post</h1>\n        <form onSubmit={handleSubmit}>\n          <label className=\"label\" htmlFor=\"start_date\">\n            Start Date\n          </label>\n          <input name = \"start_date\" className='input' />\n\n          {/* Add an input for the username */}\n          <label className=\"label\" htmlFor=\"end_date\">\n            End Date\n          </label>\n          <input name = \"end_date\" className='input' />\n          <label className=\"label\" htmlFor=\"price\">\n            Price\n          </label>\n          <input name = \"price\" className='input' />\n          <label className=\"label\" htmlFor=\"description\">\n            Some description about your house\n          </label>\n          <input name = \"description\" className='input' />\n          <label className=\"label\" htmlFor=\"email\">\n            Email\n          </label>\n          <input name = \"email\" className='input' />\n          <label className=\"label\" htmlFor=\"city\">\n            City\n          </label>\n          <input name = \"city\" className='input' />\n          <div><input type=\"submit\" className='button is-primary'/></div>\n        </form>\n      </div>\n    </section>\n  );\n};\n\nexport default AddPostPage;\n","import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst UserHomePage = (props) => {\n  const navigate = useNavigate();\n\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    console.log(\"Get the posts on home page\");\n    fetch(`/api/${props.user_name.user_name.toString()}/posts`).then(response =>{\n      if (response.ok){\n        response.json().then(data=>{\n          setPosts(data)\n        })\n      }\n    })\n  }, []);\n  const handleClick = (id) => {\n    fetch(`/api/${props.user_name.user_name.toString()}/${id.toString()}`,{\n      method:'DELETE',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n    }).then(response =>{\n      console.log(response)\n      if(response.ok){\n\n\n          //window.location.reload(true);\n          navigate('/posts', {replace: true})\n\n      }else{\n        console.log('sign up wrong')\n      }\n    })\n  };\n\n  return (\n    <>\n     <section className=\"hero\">\n      <div class=\"container is-max-desktop\" style={{marginTop: '3rem'}}>\n      </div>\n      <div>\n        <p>\n          ~~~\n        </p>\n      </div>\n\n          <div className=\"post-list\" class=\"columns is-desktop\" >\n    {posts && posts.map(post => (\n      <div key={post._id} class=\"column is-primary\"style={{backgroundColor: '#4FFFB0'}} >\n        <h2 className=\"title is-4\">{post.user_name}</h2>\n        <p><strong>Start date:</strong> {post.start_date}</p >\n        <p><strong>End date:</strong> {post.end_date}</p >\n        <p><strong>Price:</strong> {post.price}</p >\n        <p><strong>Description:</strong> {post.description}</p >\n        <p><strong>Email:</strong> {post.email}</p >\n        <p><strong>City:</strong> {post.location.city}</p >\n        <p><strong>State:</strong> {post.location.state}</p >\n        <p><strong>Zip Code:</strong> {post.location.zipCode}</p >\n        <button onClick={() => handleClick(post._id)}className=\"button\"> Delete this post</button>\n      </div>\n    ))}\n  </div>\n\n      \n    </section>\n    </>\n  );\n};\n\nexport default UserHomePage;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n  Navigate,\n} from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport LoginPage from \"./pages/LoginPage\";\n//import LogoutPage from \"./pages/LogoutPage\";\n//import InstructorHomePage from \"./pages/InstructorHomePage\";\n//import ClassSessionPage from \"./pages/ClassSessionPage\";\nimport Navbar from \"./components/Navbar\";\nimport SignupPage from \"./pages/SignupPage\";\nimport PostsPage from \"./pages/PostsPage\";\nimport AddPostPage from \"./pages/AddPostPage\";\nimport UserHomePage from \"./pages/UserHomePage\";\n\n/**\n * CS-5356-TODO\n * App contains all the pages for this web application\n *\n * There are 4 pages\n * - /login\n * - /logout\n * - /instructor-home\n * - /:session-code\n *\n * When the App loads for the first time, make a\n * GET /api/user to see if the user is signed in.\n *\n * If you receive a 401, set the isSignedIn state\n * to false.\n *\n * If you receive a 200, set the isSignedIn state to true\n * and then set the user state to the user object\n * from the response of the request.\n *\n */\nconst App = () => {\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  const [user, setUser] = useState(null);\n\n  const requiresLogin = Component => {\n    return isSignedIn ? Component : <Navigate to=\"/login\" />;\n  };\n\n  useEffect(() => {\n    console.log(\"[CS5356] Loading App for the first time\");\n    fetch('api/user').then(response =>{\n      if (response.ok){\n        response.json().then(data=>{\n          setIsSignedIn(true)\n          setUser(data)\n          console.log(user)\n        })\n      }\n    })\n  }, []);\n\n  return (\n    <div>\n        \n      <Router>\n        <Navbar isSignedIn={isSignedIn} user_name={user?.userId ?? null} />\n        <Routes>\n        <Route\n            path=\"/signup\"\n            element={(<SignupPage />)}\n          />\n          <Route\n            path=\"/addPost\"\n            element={(<AddPostPage user_name={user} />)}\n          />\n           <Route\n            path=\"/userHome\"\n            element={(<UserHomePage user_name={user} />)}\n          />\n          {/*<Route\n            path=\"/instructor-home\"\n            element={requiresLogin(<InstructorHomePage />)}\n  />*/}\n          <Route\n            path=\"/login\"\n            element={\n              <LoginPage\n                onLogin={(user1) => {\n                  setIsSignedIn(true);\n                  setUser(user1)\n                }}\n              />\n            }\n          />\n          <Route\n            path=\"/posts\"\n            element={\n              <PostsPage\n              user_name={user}\n              />\n            }\n          />\n          { /*<Route\n            path=\"/:sessionCode\"\n            element={<ClassSessionPage isSignedIn={isSignedIn} />}\n        />*/}\n          { /*<Route exact path=\"/logout\" element={<LogoutPage />} />*/}\n          <Route exact path=\"/\" element={<Home isSignedIn={isSignedIn} />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}